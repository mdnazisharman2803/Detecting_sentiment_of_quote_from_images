{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "HackerEarth1.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "temjRZWJjOfH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "91d1317e-a96f-496a-f25e-14c22aac12bd"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem.porter import PorterStemmer\n",
        "import seaborn as sns\n",
        "import re\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EpjjhQpujcRs",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from pydrive.auth import GoogleAuth\n",
        "from pydrive.drive import GoogleDrive\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials\n",
        "# Authenticate and create the PyDrive client.\n",
        "auth.authenticate_user()\n",
        "gauth = GoogleAuth()\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\n",
        "drive = GoogleDrive(gauth)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1B7C55zDjgDD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#https://drive.google.com/file/d/1LxF2TdIqrZ71l8IQIbnVUejcpyoVVgKH/view?usp=sharing\n",
        "downloaded = drive.CreateFile({'id':'1LxF2TdIqrZ71l8IQIbnVUejcpyoVVgKH'}) \n",
        "downloaded.GetContentFile('training.1600000.processed.noemoticon')  \n",
        "data = pd.read_csv('training.1600000.processed.noemoticon',encoding='latin-1',header=None)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TbBHVys2jxt7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "stemmer = PorterStemmer()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1_zFKtvgj6e1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "ebf05bcb-9adf-4eec-e832-5287dafa45f3"
      },
      "source": [
        "nltk.download('stopwords')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yOcBWy8kj96Y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "text1=[]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pd7LJyskkAm1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for i in range(750000,850000):\n",
        "    sentence = re.sub('[^a-zA-Z123456789]', ' ', data[5][i])\n",
        "    sentence = sentence.lower()\n",
        "    sentence = sentence.split()\n",
        "    sentence = [stemmer.stem(word) for word in sentence if not word in stopwords.words('english')]\n",
        "    sentence = ' '.join(sentence)\n",
        "    text1.append(sentence)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n1x6m-OqkhCu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "51a46643-1a9e-4ca2-a53d-f744fb8b95fe"
      },
      "source": [
        "len(text1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "100000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WnlCDY3Lkk31",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "49144096-921e-4d8a-9c26-7fe7982e0d1a"
      },
      "source": [
        "text1[-1]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic": {
              "type": "string"
            },
            "text/plain": [
              "'artfir account sell fun thing suggest sign one http tinyurl com da7f97'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "THrnEgwjklKL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y = data[0][750000:850000]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k35UJlAekleK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "92552382-5112-4868-e690-5deb750a076c"
      },
      "source": [
        "data[5][849999]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic": {
              "type": "string"
            },
            "text/plain": [
              "\"if you don't have an artfire account to sell your fun things, i suggest you sign up for one  http://tinyurl.com/da7f97\""
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i8ob9xULklx-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "cv = CountVectorizer(max_features=5000,ngram_range=(1,3))\n",
        "X = cv.fit_transform(text1[0]).toarray()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "apolHkHkk29O",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "xtrain,xtest,ytrain,ytest = train_test_split(X,y,test_size=0.33,random_state=42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lbGBQCqck3LH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_confusion_matrix(cm, classes,\n",
        "                          normalize=False,\n",
        "                          title='Confusion matrix',\n",
        "                          cmap=plt.cm.Blues):\n",
        "    \"\"\"\n",
        "    See full source and example: \n",
        "    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html\n",
        "    \n",
        "    This function prints and plots the confusion matrix.\n",
        "    Normalization can be applied by setting `normalize=True`.\n",
        "    \"\"\"\n",
        "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
        "    plt.title(title)\n",
        "    plt.colorbar()\n",
        "    tick_marks = np.arange(len(classes))\n",
        "    plt.xticks(tick_marks, classes, rotation=45)\n",
        "    plt.yticks(tick_marks, classes)\n",
        "\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "        print(\"Normalized confusion matrix\")\n",
        "    else:\n",
        "        print('Confusion matrix, without normalization')\n",
        "\n",
        "    thresh = cm.max() / 2.\n",
        "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
        "        plt.text(j, i, cm[i, j],\n",
        "                 horizontalalignment=\"center\",\n",
        "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LDE_rIyck3Xy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.naive_bayes import MultinomialNB\n",
        "classifier=MultinomialNB()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UzD0lh1EnUtw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn import metrics"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fZzB-uEZmshw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "78bedbcf-e856-4cf7-b6de-203736326f31"
      },
      "source": [
        "classifier.fit(xtrain, ytrain)\n",
        "pred = classifier.predict(xtest)\n",
        "score = metrics.accuracy_score(ytest, pred)\n",
        "print(\"accuracy:   %0.3f\" % score)\n",
        "#cm = metrics.confusion_matrix(ytest, pred)\n",
        "#plot_confusion_matrix(cm, classes=['FAKE', 'REAL'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "accuracy:   0.765\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1xZgmySRnOOR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# https://drive.google.com/file/d/1c6f6uGi9YGjsv2Oernkr7cf9bVTgzpRj/view?usp=sharing\n",
        "downloaded = drive.CreateFile({'id':'1c6f6uGi9YGjsv2Oernkr7cf9bVTgzpRj'}) \n",
        "downloaded.GetContentFile('test_middle.csv')  \n",
        "data = pd.read_csv('test_middle.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "stxfACXfo04O",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "019067d9-7bca-44eb-b42e-8d66ff0949f5"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Filename</th>\n",
              "      <th>Category</th>\n",
              "      <th>Text</th>\n",
              "      <th>finalprediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Test1001.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>When people ask\\nwhat I see in you,\\nI just sm...</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Test1012.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>eS\\nocd) |\\naie al\\nLR</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Test1022.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>LOVE\\n®</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Test1071.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>eee MU WALLA OL\\n\\nem eat nimeel ie\\n\\nnot liv...</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Test1122.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>‘Zeigler, author of \"Fair Play: How LGBT Athle...</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Filename  ...  finalprediction\n",
              "0  Test1001.jpg  ...         Negative\n",
              "1  Test1012.jpg  ...         Positive\n",
              "2  Test1022.jpg  ...         Negative\n",
              "3  Test1071.jpg  ...         Positive\n",
              "4  Test1122.jpg  ...         Positive\n",
              "\n",
              "[5 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W8AjukvQHgEv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# https://drive.google.com/file/d/1c6f6uGi9YGjsv2Oernkr7cf9bVTgzpRj/view?usp=sharing\n",
        "downloaded = drive.CreateFile({'id':'1_VWF8om2pO4Bn77WygW-ggXKHFffY8k6'}) \n",
        "downloaded.GetContentFile('ocr_final_data.csv')  \n",
        "data1 = pd.read_csv('ocr_final_data.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IgP_ICVoqZQj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "2bca3b42-3968-4b0b-9de2-cc3fbf1c2ba7"
      },
      "source": [
        "data1.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Unnamed: 0.1</th>\n",
              "      <th>Filename</th>\n",
              "      <th>Category</th>\n",
              "      <th>Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Test1001.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>when people ask what i in see you ijust and s...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Test1012.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>love too beautiful is to be hidden in the closet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Test1022.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>orbrf oizbrf ozbrf is oibrf re hue oabre oiabrf</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>Test1071.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>s people hate may you c for different being a...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>Test1122.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>tar r igu ahlte cming tloet authorol hon iri ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Unnamed: 0  ...                                               Text\n",
              "0           0  ...   when people ask what i in see you ijust and s...\n",
              "1           1  ...   love too beautiful is to be hidden in the closet\n",
              "2           2  ...    orbrf oizbrf ozbrf is oibrf re hue oabre oiabrf\n",
              "3           3  ...   s people hate may you c for different being a...\n",
              "4           4  ...   tar r igu ahlte cming tloet authorol hon iri ...\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M-D55HW0qlvE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "19f3ff95-60e7-47f5-cc83-c188896218dc"
      },
      "source": [
        "type(data['Text'][0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4sL6w1mEqOiC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predtext=[]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "osjRudilrCXc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "42bc489d-131e-4fdb-90b6-f0cc5f727fef"
      },
      "source": [
        "sentence = re.sub('[^a-zA-Z123456789]', ' ', data['Text'][0])\n",
        "sentence.lower()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic": {
              "type": "string"
            },
            "text/plain": [
              "'when people ask what i see in you  i just smile and look away because i m afraid if they knew  they d fall in love with you too '"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8z666d7-qXQd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for i in range(239):\n",
        "    sentence = re.sub('[^a-zA-Z123456789\\n]', ' ', str(data1['Text'][i]))\n",
        "    sentence = sentence.lower()\n",
        "    sentence = sentence.split()\n",
        "    sentence = [stemmer.stem(word) for word in sentence if not word in stopwords.words('english')]\n",
        "    sentence = ' '.join(sentence)\n",
        "    predtext.append(sentence)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LatJV9yLqzB0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "3b2b6685-729f-447b-ba29-16a2c2fb6946"
      },
      "source": [
        "len(predtext)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "239"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wloh4uzErnBB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "cv1 = CountVectorizer(max_features=5000,ngram_range=(1,3))\n",
        "Xpredict = cv1.fit_transform(predtext).toarray()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NEl36i_Osxle",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f88d1d3f-0737-4fd6-8a20-a74e9674a07a"
      },
      "source": [
        "Xpredict.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(239, 5000)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NolHqZrqtNzz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "025cd718-a2f9-47e2-c77b-c7a2f2ba85a1"
      },
      "source": [
        "type(Xpredict)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dOWL6DXouNN5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_predicted = np.zeros((239,5000))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "47fTo-P1uOY3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_predicted[:,0:3466] = Xpredict"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YrC_27TCuNCu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f8197dfe-a645-43b9-d673-dc0424687064"
      },
      "source": [
        "x_predicted.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(239, 5000)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S00x_hGjsQYn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "finalpred = classifier.predict(Xpredict)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ujH9bIHdsaw5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "f8ad01d7-c301-41aa-e53d-2ec4f8603fff"
      },
      "source": [
        "finalpred"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 4, 0, 0, 0, 0, 0,\n",
              "       0, 4, 0, 4, 4, 4, 0, 4, 4, 0, 4, 4, 0, 0, 4, 0, 4, 0, 0, 0, 4, 0,\n",
              "       4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 4, 0, 0, 4, 0, 4, 4,\n",
              "       0, 0, 4, 0, 4, 0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0,\n",
              "       0, 4, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0,\n",
              "       0, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 0, 0, 4, 4, 0, 0,\n",
              "       0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4,\n",
              "       0, 4, 4, 0, 0, 4, 0, 0, 0, 4, 4, 0, 0, 0, 4, 0, 4, 4, 0, 0, 0, 4,\n",
              "       4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 4,\n",
              "       0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4,\n",
              "       0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 4])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qaxAdum7uveR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "finalprediction = []\n",
        "for i in range(239):\n",
        "  if(finalpred[i]==4):\n",
        "    finalprediction.append('Positive')\n",
        "  else:\n",
        "    finalprediction.append('Negative')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "36w5GTXnvSVg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "5a297ab9-7289-42b0-d8a7-8d08d71a2f17"
      },
      "source": [
        "finalprediction[0]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic": {
              "type": "string"
            },
            "text/plain": [
              "'Negative'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y9OBTvkMvgUT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#csv_input = pd.read_csv('input.csv')\n",
        "data1['finalprediction'] = finalprediction\n",
        "data.to_csv('test_middle.csv', index=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qegt4xhOxYdz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 197
        },
        "outputId": "76d68e8e-e96e-47bd-dcba-65de75094140"
      },
      "source": [
        "# Write the DataFrame to CSV file.\n",
        "with open('/gdrive/My Drive/test_middle.csv', 'w') as f:\n",
        "  data.to_csv(f)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-66-00bdbe555d28>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Write the DataFrame to CSV file.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/gdrive/My Drive/test_middle.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/gdrive/My Drive/test_middle.csv'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6OMmHrP9ym-b",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "2ea186df-7c81-4707-87ab-71559c702190"
      },
      "source": [
        "from google.colab import files\n",
        "\n",
        "data.to_csv('df.csv')\n",
        "files.download('df.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_5ff52a63-e2bf-4045-9386-4d991f916d8e\", \"df.csv\", 20371)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xhKkdz0S6wqJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "d10afe6e-d4d8-46f6-80e6-8c9b0b2fabe8"
      },
      "source": [
        "data['Text'].isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "109"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3UPeqsL6y7UK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "5d9bdf70-42c7-4959-ae66-e58a8e78e4ef"
      },
      "source": [
        "type(data['Text'][0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cy3bQfEK00V4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "417b38fb-c122-40f1-cf29-0ae975db1d65"
      },
      "source": [
        "j=0\n",
        "for i in range(239):\n",
        "  if type(data1['Text'][i])==float:\n",
        "    data1['finalprediction'][i]=\"Random\"\n",
        "    j=j+1\n",
        "\n",
        "print(j)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "47\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "koqxOtHi2miS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "1aefe8bd-f264-4df9-c72c-be550c203f68"
      },
      "source": [
        "i"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "238"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iAOOO9rH6Ng1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "84100c8e-60f4-4ffc-b6e1-939c9a0d4bd2"
      },
      "source": [
        "sns.countplot(data1['finalprediction'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c8d7e4b38>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6zdE_uYm7U1a",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "mydata = data1['Filename']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bQcjQhba7jxE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "45f3dea6-75d8-4b71-a449-801800a83239"
      },
      "source": [
        "type(mydata)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.series.Series"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dvQI8i457mAL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "mydata = data['Filename']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B7XTSFv672fU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "finalcsv = pd.DataFrame(mydata)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CSwLX5ty7-0i",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "0633cd95-78b1-439c-a2ef-dac5c76658b3"
      },
      "source": [
        "finalcsv.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Filename</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Test1001.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Test1012.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Test1022.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Test1071.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Test1122.jpg</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Filename\n",
              "0  Test1001.jpg\n",
              "1  Test1012.jpg\n",
              "2  Test1022.jpg\n",
              "3  Test1071.jpg\n",
              "4  Test1122.jpg"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UbIfps4l8fBZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "finalcsv['Category'] = data1['finalprediction']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "czWuFDqm8lr1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "112ae30a-8e9d-4126-8fbf-f851b222f380"
      },
      "source": [
        "finalcsv.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Filename</th>\n",
              "      <th>Category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Test1001.jpg</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Test1012.jpg</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Test1022.jpg</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Test1071.jpg</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Test1122.jpg</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Filename  Category\n",
              "0  Test1001.jpg  Negative\n",
              "1  Test1012.jpg  Positive\n",
              "2  Test1022.jpg  Negative\n",
              "3  Test1071.jpg  Positive\n",
              "4  Test1122.jpg  Positive"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IWT3Z0Nl8n3a",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "fede0856-b074-4e7a-af17-f9fc68b87844"
      },
      "source": [
        "from google.colab import files\n",
        "\n",
        "finalcsv.to_csv('submission1.csv')\n",
        "files.download('submission1.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_f90b8999-8985-480d-92a0-4c8c1859bcc6\", \"submission1.csv\", 5879)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P8a--RZz82b5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "caf6ae3b-b507-429f-83b0-422b8520621c"
      },
      "source": [
        "sns.countplot(finalcsv['Category'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c916e2208>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pj1Scs5D9EMb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "0f8308f6-2911-43fd-b33c-c9556a50772f"
      },
      "source": [
        "finalcsv.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(239, 2)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0ovBOZBx9PaH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "textcsv = pd.DataFrame(text1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MxbixT-UScU0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "19a7ee69-968d-4cdc-a159-8b7d1c06bd6f"
      },
      "source": [
        "textcsv.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100000, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nGxOK-u2SgH2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "426c5e22-14d5-4f55-a8c2-bad11f961df3"
      },
      "source": [
        "textcsv.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>opotopo small slip tryfan week back felt side ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>idristwilight post han want great still work t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>rose 7 ohh poor jan pleas tell can send us email</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>final home work looong day monday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>im sad 4 chantel tom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                   0\n",
              "0  opotopo small slip tryfan week back felt side ...\n",
              "1  idristwilight post han want great still work t...\n",
              "2   rose 7 ohh poor jan pleas tell can send us email\n",
              "3                  final home work looong day monday\n",
              "4                               im sad 4 chantel tom"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T5H0-gC_Sn8Y",
        "colab_type": "text"
      },
      "source": [
        "As cleaning the data takes alot time, So i save the text of index 750000 to 850000 in textcsv file"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lcQOZ837SirB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "7beb5b93-e97d-4e2f-fb83-cd901a299e4e"
      },
      "source": [
        "from google.colab import files\n",
        "\n",
        "textcsv.to_csv('textcsv75-85.csv')\n",
        "files.download('textcsv75-85.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_eb2c3679-e829-454b-a56e-791e20682554\", \"textcsv75-85.csv\", 5152825)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1_3dDzBVTClM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
