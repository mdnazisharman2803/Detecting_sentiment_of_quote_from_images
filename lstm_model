{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "hackerearth1_keras.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "XYiKxUzOaEid",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fqJyuN5cnpcp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from pydrive.auth import GoogleAuth\n",
        "from pydrive.drive import GoogleDrive\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials\n",
        "# Authenticate and create the PyDrive client.\n",
        "auth.authenticate_user()\n",
        "gauth = GoogleAuth()\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\n",
        "drive = GoogleDrive(gauth)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8sMH8lGnpLuc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#https://drive.google.com/file/d/1LxF2TdIqrZ71l8IQIbnVUejcpyoVVgKH/view?usp=sharing\n",
        "downloaded = drive.CreateFile({'id':'1LxF2TdIqrZ71l8IQIbnVUejcpyoVVgKH'}) \n",
        "downloaded.GetContentFile('training.1600000.processed.noemoticon')  \n",
        "data = pd.read_csv('training.1600000.processed.noemoticon',encoding='latin-1',header=None)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SxCi72E-pgIV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "8d69b7e1-654b-4995-824d-b7dcf0c8f11c"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1467810369</td>\n",
              "      <td>Mon Apr 06 22:19:45 PDT 2009</td>\n",
              "      <td>NO_QUERY</td>\n",
              "      <td>_TheSpecialOne_</td>\n",
              "      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1467810672</td>\n",
              "      <td>Mon Apr 06 22:19:49 PDT 2009</td>\n",
              "      <td>NO_QUERY</td>\n",
              "      <td>scotthamilton</td>\n",
              "      <td>is upset that he can't update his Facebook by ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1467810917</td>\n",
              "      <td>Mon Apr 06 22:19:53 PDT 2009</td>\n",
              "      <td>NO_QUERY</td>\n",
              "      <td>mattycus</td>\n",
              "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1467811184</td>\n",
              "      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n",
              "      <td>NO_QUERY</td>\n",
              "      <td>ElleCTF</td>\n",
              "      <td>my whole body feels itchy and like its on fire</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1467811193</td>\n",
              "      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n",
              "      <td>NO_QUERY</td>\n",
              "      <td>Karoli</td>\n",
              "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   0  ...                                                  5\n",
              "0  0  ...  @switchfoot http://twitpic.com/2y1zl - Awww, t...\n",
              "1  0  ...  is upset that he can't update his Facebook by ...\n",
              "2  0  ...  @Kenichan I dived many times for the ball. Man...\n",
              "3  0  ...    my whole body feels itchy and like its on fire \n",
              "4  0  ...  @nationwideclass no, it's not behaving at all....\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yuYo7VoUptIp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem.porter import PorterStemmer\n",
        "import seaborn as sns\n",
        "import re\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "afzdEpRAwmY_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "stemmer = PorterStemmer()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-TRT_V6Rwstw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "8c4b4c99-1097-4c1f-ba33-2e689bb9662f"
      },
      "source": [
        "nltk.download('stopwords')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TmY0YcP5wwMh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "text1=[]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-bnOqwbdxUSr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for i in range(750000,850000):\n",
        "    sentence = re.sub('[^a-zA-Z123456789]', ' ', data[5][i])\n",
        "    sentence = sentence.lower()\n",
        "    sentence = sentence.split()\n",
        "    sentence = [stemmer.stem(word) for word in sentence if not word in stopwords.words('english')]\n",
        "    sentence = ' '.join(sentence)\n",
        "    text1.append(sentence)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pt3bKD-dxbQq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "6ac0894b-2df2-46bc-8892-1bbf7ede5562"
      },
      "source": [
        "len(text1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "100000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nX9Xd2VCzDzZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y = data[0][750000:850000]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mjWzLTz3zIqh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "97ad002a-39f2-493d-96cc-f824518b1867"
      },
      "source": [
        "import tensorflow as tf\n",
        "tf.__version__"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic": {
              "type": "string"
            },
            "text/plain": [
              "'2.2.0'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E5Kcbfqgzuh-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.layers import Embedding\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.preprocessing.text import one_hot\n",
        "from tensorflow.keras.layers import LSTM\n",
        "from tensorflow.keras.layers import Dense"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S93lDm8Vzwhl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "voc_size = 10000\n",
        "onehot_repr=[one_hot(words,voc_size)for words in text1] \n",
        "onehot_repr"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ckxeftqi0gFi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sent_length=50\n",
        "embedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)\n",
        "#print(embedded_docs)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hRX3ZFsA0t8j",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 340
        },
        "outputId": "39cc8648-ce2c-4b07-d09d-c335d195fe73"
      },
      "source": [
        "from tensorflow.keras.layers import Dropout\n",
        "## Creating model\n",
        "embedding_vector_features=40\n",
        "model=Sequential()\n",
        "model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\n",
        "model.add(Dropout(0.7))\n",
        "model.add(LSTM(100))\n",
        "model.add(Dropout(0.7))\n",
        "model.add(Dense(1,activation='sigmoid'))\n",
        "model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
        "print(model.summary())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_13\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_13 (Embedding)     (None, 50, 40)            400000    \n",
            "_________________________________________________________________\n",
            "dropout_25 (Dropout)         (None, 50, 40)            0         \n",
            "_________________________________________________________________\n",
            "lstm_19 (LSTM)               (None, 100)               56400     \n",
            "_________________________________________________________________\n",
            "dropout_26 (Dropout)         (None, 100)               0         \n",
            "_________________________________________________________________\n",
            "dense_9 (Dense)              (None, 1)                 101       \n",
            "=================================================================\n",
            "Total params: 456,501\n",
            "Trainable params: 456,501\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9_Mzj5z402IL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "98afb8ee-fa92-45bf-d93d-69f94f80ac92"
      },
      "source": [
        "len(embedded_docs),y.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100000, (100000,))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g2kHkmz50-jS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_final=np.array(embedded_docs)\n",
        "y_final=np.array(y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e9H8KSA-3HU_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for i in range(100000):\n",
        "  if y_final[i]==4:\n",
        "    y_final[i]=1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LLGRd6KL3rAX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "5f61d5d7-d01c-4fc5-944a-6c01b8342b06"
      },
      "source": [
        "sns.countplot(y_final)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0fa1eeb278>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1BgvW-nc1Dkk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.33, random_state=42)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dqnCrooV1IB3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "3453fe08-c286-4650-f63a-145734dd04dc"
      },
      "source": [
        "# Finally Training\n",
        "model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=5,batch_size=32)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "2094/2094 [==============================] - 49s 23ms/step - loss: 0.4504 - accuracy: 0.7904 - val_loss: 0.4974 - val_accuracy: 0.7572\n",
            "Epoch 2/5\n",
            "2094/2094 [==============================] - 48s 23ms/step - loss: 0.4392 - accuracy: 0.7974 - val_loss: 0.4979 - val_accuracy: 0.7575\n",
            "Epoch 3/5\n",
            "2094/2094 [==============================] - 46s 22ms/step - loss: 0.4293 - accuracy: 0.8034 - val_loss: 0.5018 - val_accuracy: 0.7559\n",
            "Epoch 4/5\n",
            "2094/2094 [==============================] - 47s 23ms/step - loss: 0.4222 - accuracy: 0.8078 - val_loss: 0.5178 - val_accuracy: 0.7536\n",
            "Epoch 5/5\n",
            "2094/2094 [==============================] - 48s 23ms/step - loss: 0.4147 - accuracy: 0.8104 - val_loss: 0.5256 - val_accuracy: 0.7541\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f0f961fe160>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RVK1zcVR1N22",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "ff160345-1c94-4aba-f35e-3cdd42fa929d"
      },
      "source": [
        "y_pred=model.predict_classes(X_test)\n",
        "from sklearn.metrics import confusion_matrix\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(y_test,y_pred)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[12537  3997]\n",
            " [ 4118 12348]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7540909090909091"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tAqnJkHD2KqL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "336a54b1-92ce-4eb7-8f73-c2107d732389"
      },
      "source": [
        "sns.countplot(y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0fa2c9b780>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Re86uJRM2VDr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#https://drive.google.com/file/d/1_VWF8om2pO4Bn77WygW-ggXKHFffY8k6/view?usp=sharing\n",
        "#https://drive.google.com/file/d/1_VWF8om2pO4Bn77WygW-ggXKHFffY8k6/view?usp=sharing\n",
        "downloaded = drive.CreateFile({'id':'1_VWF8om2pO4Bn77WygW-ggXKHFffY8k6'}) \n",
        "downloaded.GetContentFile('ocr_final_data.csv')  \n",
        "data1 = pd.read_csv('ocr_final_data.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5vypKUIPHEqe",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "b4a33938-39c0-4710-e0a6-40a58cdb3d1d"
      },
      "source": [
        "data1.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Unnamed: 0.1</th>\n",
              "      <th>Filename</th>\n",
              "      <th>Category</th>\n",
              "      <th>Text</th>\n",
              "      <th>finalprediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Test1001.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>when people ask what i in see you ijust and s...</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Test1012.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>love too beautiful is to be hidden in the closet</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Test1022.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>orbrf oizbrf ozbrf is oibrf re hue oabre oiabrf</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>Test1071.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>s people hate may you c for different being a...</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>Test1122.jpg</td>\n",
              "      <td>NaN</td>\n",
              "      <td>tar r igu ahlte cming tloet authorol hon iri ...</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Unnamed: 0  ...  finalprediction\n",
              "0           0  ...         Positive\n",
              "1           1  ...         Positive\n",
              "2           2  ...         Positive\n",
              "3           3  ...         Positive\n",
              "4           4  ...         Negative\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xhczUxUTLTPw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predtext=[]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bhAuLrk1LWrF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for i in range(239):\n",
        "    sentence = re.sub('[^a-zA-Z123456789\\n]', ' ', str(data1['Text'][i]))\n",
        "    sentence = sentence.lower()\n",
        "    sentence = sentence.split()\n",
        "    sentence = [stemmer.stem(word) for word in sentence if not word in stopwords.words('english')]\n",
        "    sentence = ' '.join(sentence)\n",
        "    predtext.append(sentence)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "naiHUm4ELdEx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "64f5ee3b-3447-4172-ae4e-eee02432d555"
      },
      "source": [
        "len(predtext)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "239"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PcaV5dQdLgud",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "onehot_repr1=[one_hot(words,voc_size)for words in predtext] \n",
        "onehot_repr1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GNjOG5INLtUP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sent_length=50\n",
        "embedded_docs1=pad_sequences(onehot_repr1,padding='pre',maxlen=sent_length)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zSppnngiL0kt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "ypred = model.predict(embedded_docs1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6TB7B04KMNGN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "893fa636-0fb2-4516-a9fd-c8b3317e30d5"
      },
      "source": [
        "ypred[0]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.69834465], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kk-_iDOsMbWU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "98a6b65d-693f-459e-f23b-9972743b594e"
      },
      "source": [
        "if(ypred[0]>0.69):\n",
        "  print(\"sj\")\n",
        "else:\n",
        "  print(\"frf\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "sj\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6KfewRePMOgh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "finalprediction = []\n",
        "for i in range(239):\n",
        "  if(ypred[i]>0.5):\n",
        "    finalprediction.append('Positive')\n",
        "  else:\n",
        "    finalprediction.append('Negative')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "roGp8a5IM2HW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "a2111255-ba42-410f-a3b1-11f9bd09622a"
      },
      "source": [
        "finalprediction[0]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic": {
              "type": "string"
            },
            "text/plain": [
              "'Positive'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uhlrbAnKM_Fa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data1['finalprediction'] = finalprediction"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qZK7r6BRNFQd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "7a995501-553e-4819-8ca4-fc36c2497db0"
      },
      "source": [
        "type(data1['Text'][1])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5hwe2tcSMvN-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "68e33b59-ca76-40bb-bc3b-065c1ec0c8d3"
      },
      "source": [
        "j=0\n",
        "for i in range(239):\n",
        "  if type(data1['Text'][i])==float:\n",
        "    data1['finalprediction'][i]=\"Random\"\n",
        "    j=j+1\n",
        "\n",
        "print(j)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "47\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6DIOIGTtNKDO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "b5ec6184-9856-43ee-98ed-77c61ea4e8ba"
      },
      "source": [
        "sns.countplot(data1['finalprediction'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0f96c00860>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NFX2ZWbANRAV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "mydata = data1['Filename']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mWsI4K1xNUyD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "finalcsv = pd.DataFrame(mydata)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2RHRv1KWNX_q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "finalcsv['Category'] = data1['finalprediction']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y1-dE-woNbEh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "5363ca42-cbbb-460d-830e-142bf332bf1f"
      },
      "source": [
        "finalcsv.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Filename</th>\n",
              "      <th>Category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Test1001.jpg</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Test1012.jpg</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Test1022.jpg</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Test1071.jpg</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Test1122.jpg</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Filename  Category\n",
              "0  Test1001.jpg  Positive\n",
              "1  Test1012.jpg  Positive\n",
              "2  Test1022.jpg  Positive\n",
              "3  Test1071.jpg  Positive\n",
              "4  Test1122.jpg  Negative"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "peTNDfg1Ndrd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "c4ba319b-8676-4d86-ed59-6dda8bdbef50"
      },
      "source": [
        "from google.colab import files\n",
        "\n",
        "finalcsv.to_csv('submission2.csv')\n",
        "files.download('submission2.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_69f1a2fe-9ed0-4a5e-b09b-a3c4f7f44432\", \"submission2.csv\", 5879)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xF9hzRo5Niw-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
